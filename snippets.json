{

	"html": {
		"snippets": {
			"----------": "General use snippets",

			"if": "if (${1:condition}) {\n\t|\n}",
			"try": "try {\n\t|\n} catch(e) {\n\t|\n}",
			"ife": "if (${1:condition}) {\n\t|\n} else {\n\t|\n}",
			"iei": "if (${1:condition}) {\n\t|\n} else if(${2:condition}) {\n\t|\n}",
			"fn": "function ${1:name}(${2:params}) {\n\t|\n}",
			"mfn": "${1:name}: function ${1:name}(${2:params}) {\n\t|\n}",
			"ifn": "(function ${1:name}(${2:params}) {\n\t|\n})();",
			"db": "debugger;",
			"r": "var ${1:app} = require('|');",
			"doc": "/**\n * |\n *\n */",
			"@a": "@author ",
			"@r": "@returns ",
			"@p": "@param ${1:name} : ${2:String} ${3:description}",
			"me": "module.exports = {\n\t|\n};",
			"$t": "var $t = \\$(this)",
			"sw": "switch(${1:test}) {\n\tcase ${2:val}:\n\t|\nbreak;\n\tdefault:\n\t|\nbreak;\n}",
			"t": "this",


			"----------": "BackboneJS snippets",
			"brd": "\nrender: function () {\n\n\tthis.\\$el.html(this.template(|));\n\treturn this;\n},\n",
			"def": "define([\n\t'${1:backbone}'\n], function(${2:Backbone}) {\n\t|\n});",
			"bv": "var view = Backbone.View.extend({\n\ttemplate: '|',\n\n\tinitialize: function (options) {\n\t\tthis.options = options \\|\\| {};\n\t},\n\n\trender: function() {\n\t\tvar html = this.template();\n\n\t\tthis.\\$el.html(html);\n\n\t\treturn this;\n\t}\n});\n\nreturn view;",

			"----------": "Jasmine snippets",
            "ae" : "\nafterEach(function() {\n\t$1\n});\n\t",
            "be" : "\nbeforeEach(function() {\n\t$1\n});\n\t",
            "ca" : "${1:spy}.calls.all()\n\t",
            "ca" : "${1:spy}.calls.any()\n\t",
            "caa" : "${1:spy}.calls.allArgs()\n\t",
            "caf" : "${1:spy}.calls.argsFor(${2:call number})\n\t",
            "cc" : "${1:spy}.calls.count()\n\t",
            "cf" : "${1:spy}.calls.first()\n\t",
            "cmr" : "${1:spy}.calls.mostRecent()\n\t",
            "cr" : "${1:spy}.calls.reset()\n\t",
            "cs" : "jasmine.createSpy('${1:name}');$0",
            "cso" : "jasmine.createSpyObj('${1:spy name}', ['${2:method name}'$3]);$0",
            "desc" : "\ndescribe('${1:Name of the group}', function() {\n\t$2\n});\n\t",
            "exp" : "expect($1)$0",
            "fdesc" : "\nfdescribe('${1:Name of the group}', function() {\n    $2\n});\n    ",
            "fit" : "\nfit('${1:should behave...}', function() {\n    $2\n});\n    ",
            "it" : "\nit('should ${1:...}', function() {\n\t$2\n});\n\t",
            "oc" : "jasmine.objectContaining('${1:key}': ${2:value}\\}})$0",
            "any" : "jasmine.any($1)$0",
            "nb" : "expect($1).not.toBe($2);$0\n\t",
            "nd" : "expect($1).not.toBeDefined();$0\n\t",
            "nct" : "expect($1).not.toBeCloseTo(${2:number}, ${3:delta});$0\n\t",
            "nf" : "expect($1).not.toBeFalsy();$0\n\t",
            "ngt" : "expect($1).not.toBeGreaterThan($2);$0\n\t",
            "nlt" : "expect($1).not.toBeLessThan($2);$0\n\t",
            "nn" : "expect($1).not.toBeNull();$0\n\t",
            "nt" : "expect($1).not.toBeTruthy();$0\n\t",
            "nu" : "expect($1).not.toBeUndefined();$0\n\t",
            "nc" : "expect(${1:array}).not.toContain(${2:item});$0\n\t",
            "ne" : "expect($1).not.toEqual($2);$0\n\t",
            "nt" : "expect($1).not.toThrow();$0\n\t",
            "nm" : "expect($1).not.toMatch($2);$0\n\t",
            "scf" : "spyOn(${1:object}, '${2:method}').and.callFake(${3:function() \\{\n    $4\n\\}});$0\n    ",
            "sct" : "spyOn(${1:object}, '${2:method}').and.callThrough();$0",
            "srv" : "spyOn(${1:object}, '${2:method}').and.returnValue('${3:value}');$0",
            "ss" : "spyOn(${1:object}, '${2:method}').and.stub();$0",
            "ste" : "spyOn(${1:object}, '${2:method}').and.throwError('${3:error}');$0",
            "so" : "spyOn(${1:object}, '${2:method}')$3;$0\n\t",
            "tb" : "expect($1).toBe($2);$0\n\t",
            "tbct" : "expect($1).toBeCloseTo(${2:number}, ${3:delta});$0\n\t",
            "tbd" : "expect($1).toBeDefined();$0\n\t",
            "tbf" : "expect($1).toBeFalsy();$0\n\t",
            "tbgt" : "expect($1).toBeGreaterThan($2);$0\n\t",
            "tblt" : "expect($1).toBeLessThan($2);$0\n\t",
            "tbn" : "expect($1).toBeNull();$0\n\t",
            "tbt" : "expect($1).toBeTruthy();$0\n\t",
            "tc" : "expect(${1:array}).toContain(${2:item});$0\n\t",
            "tbu" : "expect($1).toBeUndefined();$0\n\t",
            "te" : "expect($1).toEqual($2);$0\n\t",
            "thbc" : "expect($1).toHaveBeenCalled();$0\n\t",
            "thbcw" : "expect($1).toHaveBeenCalledWith(${2:params});$0\n\t",
            "tm" : "expect($1).toMatch($2);$0\n\t",
            "tt" : "expect($1).toThrow();$0\n\t",
            "tte" : "expect($1).toThrowError(${2:error});$0",
            "xdesc" : "\nxdescribe('${1:Name of the group}', function() {\n\t$2\n});\n\t",
            "xit" : "\nxit('${1:should behave...}', function() {\n\t$2\n});\n\t",


            "----------": "Demandware snippets",
            "fcnt": "URLUtils.httpContinue()",
            "http": "URLUtils.url('|')",
            "msg": "Resource.msg('|', '|', null);",



			"----------": ""
		}

	},

	"js": {
		"extends": "html"
	}


}
